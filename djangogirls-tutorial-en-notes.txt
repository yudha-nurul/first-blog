--- Command Line ---
whoami : printed your username
Command (Windows)		Command (Mac OS / Linux) 	Description 			      Example
exit 			          exit 						          close the window 		    exit
cd 				          cd 							          change directory 		    cd test
dir 			          ls 							          list directories/files 	dir
copy 			          cp 							          copy file 				      copy c:\test\test.txt c:\windows\test.txt
move 			          mv 							          move file 				      move c:\test\test.txt c:\windows\test.txt
mkdir 		          mkdir 					          create a new directory   mkdir testdirectory
rmdir (or del) 	    rm 							          delete a file 			    del c:\test\test.txt
rmdir \S 		        rm -r 					          delete a directory 		   rm -r testdirector


--- Virtual environment ---
# make project folder (prepare folder project django):
$ mkdir djangogirls 
$ cd djangogirls
# make virtual env :
$ python3 -m venv myvenv
# start the virtual env :
C:\Users\Name\djangogirls> myvenv\Scripts\activate
for linux :
$ source myvenv/bin/activate


--- Installing Django in venv---
# make sure we have the latest version of pip
pip install --upgrade pip
# install django in started venv
pip install django~=___(version of django)
# (if get an error when calling pip on windows, check if your project path contain spaces or special character)


--- Create django project ---
# for windows, don't forget to add the period (or dot) . at the end:
(myvenv) C:\Users\Name\djangogirls> django-admin.py startproject mysite .

# for mac or linux, don't forget to add the period (or dot) . at the end:
(myvenv) ~/djangogirls$ django-admin startproject mysite .
#the project structur will be create like this:
djangogirls
├───manage.py
└───mysite
    settings.py
    urls.py
    wsgi.py
    __init__.py


--- changing settings ---
# in mysite/setting.py, find the line that contains TIME_ZONE  and modify it to choose your own timezone:
TIME_ZONE = 'Europe/Berlin'

# in mysite/setting.py, add path for static files :
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, static')


--- setup a database ---
# there is a lot of different database software, in this case we use sqlite3.
# mysite/settings.py :
DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
  }
}

# create database :
(myvenv) ~/djangogirls$ python manage.py migrate
Operations to perform:
  Apply all migrations: auth, admin, contenttypes, sessions
Running migrations:
  Rendering model states... DONE
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying sessions.0001_initial... OK


--- starting the web server ---
(myvenv) ~/djangogirls$ python manage.py runserver
# If you are on Windows and this fails with UnicodeDecodeError , use this command instead:
(myvenv) ~/djangogirls$ python manage.py runserver 0:8000

# Django models
# What we want to create now is something that will store all the posts in our blog. But to be able to do # that we need to talk a
# little bit about things called objects .
--- Objects ---








